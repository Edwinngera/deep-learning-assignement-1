from .dataset import Dataset
from .ops import Op

import typing
import numpy as np
import random

class Batch:
    '''
    A (mini)batch generated by the batch generator.
    '''

    def __init__(self):
        '''
        Ctor.
        '''

        self.data = None
        self.label = None
        self.idx = None

class BatchGenerator:
    '''
    Batch generator.
    Returned batches have the following properties:
      data: numpy array holding batch data of shape (s, SHAPE_OF_DATASET_SAMPLES).
      labels: numpy array holding batch labels of shape (s, SHAPE_OF_DATASET_LABELS).
      idx: numpy array with shape (s,) encoding the indices of each sample in the original dataset.
    '''

    def __init__(self, dataset: Dataset, num: int, shuffle: bool, op: Op = None):
        '''
        Ctor.
        Dataset is the dataset to iterate over.
        num is the number of samples per batch. the number in the last batch might be smaller than that.
        shuffle controls whether the sample order should be preserved or not.
        op is an operation to apply to input samples.
        Raises TypeError on invalid argument types.
        Raises ValueError on invalid argument values, such as if num is > len(dataset).
        '''

        self._batches = []
        dataset_size = len(dataset)

        if not isinstance(dataset, Dataset):
            raise TypeError

        if not np.issubdtype(type(num), np.integer):
            raise TypeError

        if num > dataset_size:
            raise ValueError

        if num < 1:
            raise ValueError

        data = []
        label = []
        idx = []

        if not shuffle:
            dataset = list(dataset)
            random.shuffle(dataset)

        for i in dataset:
            label.append(i.label)
            idx.append(i.idx)
            if not op:
                data.append(i.data)
            else:
                data.append(op(i.data))

        for i in range(0, dataset_size, num):
            if i+num <= dataset_size:
                batch_offset = i+num
            else:
                batch_offset = dataset_size-i
            batch = Batch()
            batch.data = data[i:batch_offset]
            batch.label = label[i:batch_offset]
            batch.idx = idx[i:batch_offset]
            self._batches.append(batch)


    def __len__(self) -> int:
        '''
        Returns the number of batches generated per iteration.
        '''

        return len(self._batches)

    def __iter__(self) -> typing.Iterable[Batch]:
        '''
        Iterate over the wrapped dataset, returning the data as batches.
        '''

        for i in self._batches:
            yield i

